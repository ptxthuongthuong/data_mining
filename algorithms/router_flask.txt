@app.route('/run_decision_tree', methods=['POST'])
def run_decision_tree():
    try:
        global dataset_info, uploaded_file

        if not uploaded_file or not dataset_info:
            return {"error": "Vui lòng tải lên dataset trước khi chạy thuật toán"}, 400

        filepath = os.path.join(app.config['UPLOAD_FOLDER'], uploaded_file)
        df = pd.read_excel(filepath)

        criterion = request.form.get('criterion', 'entropy')  # 'entropy' hoặc 'gini'
        target_column = request.form.get('target_column')
        selected_columns = request.form.getlist('selected_columns')

        if not target_column or not selected_columns:
            return {"error": "Vui lòng chọn cột mục tiêu và các cột dữ liệu"}, 400

        # Chỉ lấy cột dạng categorical
        X = df[selected_columns]
        y = df[target_column]

        if not X.select_dtypes(include='object').shape[1] == len(selected_columns):
            return {"error": "Chỉ hỗ trợ dữ liệu dạng categorical (chuỗi hoặc phân loại)"}, 400

        # Khởi tạo và huấn luyện mô hình Decision Tree
        tree = ID3DecisionTree(criterion=criterion)
        tree.fit(X, y, feature_names=selected_columns)

        # Xuất thông tin cây quyết định
        tree_info = tree.export_tree()

        # Lấy chi tiết thông số của từng node
        node_details_df = tree.export_node_details()
        
        # Thêm cột cho việc hiển thị trên giao diện
        node_details_df['Node Info'] = node_details_df.apply(
            lambda row: f"Parent: {row['parent_feature'] or 'Root'}, " + 
                        f"Value: {row['node_value']}, " + 
                        f"{'Leaf' if row['is_leaf'] else 'Internal Node'}", 
            axis=1
        )
        
        # Định dạng các cột số để dễ đọc
        numeric_columns = ['information_gain', 'entropy', 'gini']
        for col in numeric_columns:
            if col in node_details_df.columns:
                node_details_df[col] = node_details_df[col].apply(lambda x: f'{x:.4f}' if pd.notnull(x) else 'N/A')
        
        # Chuyển DataFrame sang HTML để hiển thị
        node_details_html = node_details_df.to_html(
            classes="table table-bordered table-striped", 
            index=False, 
            columns=['Node Info'] + numeric_columns + ['class_distribution']
        )

        # Visualization (SVG) cho cây quyết định
        import matplotlib.pyplot as plt
        from io import BytesIO
        import base64

        fig, ax = plt.subplots(figsize=(14, 10))  
        plot_tree(
            tree.model,
            feature_names=selected_columns,
            class_names=list(map(str, tree.class_names)),
            filled=True,  
            rounded=True,  
            fontsize=10,  
            ax=ax
        )

        buf = BytesIO()
        plt.savefig(buf, format='svg')
        tree_svg = base64.b64encode(buf.getvalue()).decode('utf-8')
        plt.close(fig)

        return {
            "tree_graph": tree_svg,
            "tree_info": tree_info,
            "node_details": node_details_html
        }

    except Exception as e:
        import traceback
        print(traceback.format_exc())
        return {"error": f"Đã xảy ra lỗi: {str(e)}"}, 500